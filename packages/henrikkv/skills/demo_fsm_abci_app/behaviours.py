# ------------------------------------------------------------------------------
#
#   Copyright 2023
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol ``."""

import sys
from abc import ABC
from enum import Enum
from typing import Any
from pathlib import Path

from aea.skills.behaviours import State, FSMBehaviour

from packages.henrikkv.skills.demo_fsm_abci_app.scraper import GitHubScraper


class DemofsmabciappEvents(Enum):
    """Events that can occur in the demo FSM ABCI app."""

    DONE = "DONE"
    ERROR = "ERROR"
    TIMEOUT = "TIMEOUT"
    RETRY = "RETRY"
    NO_NEW_MESSAGES = "NO_NEW_MESSAGES"


class DemofsmabciappStates(Enum):
    """Enumeration of states for the Demofsmabciapp FSM."""

    ERRORROUND = "errorround"
    PREPAREROUND = "prepareround"
    PAUSEROUND = "pauseround"
    CHECKROUND = "checkround"
    EXECUTEROUND = "executeround"


class BaseState(State, ABC):
    """Base class for states."""

    _state: DemofsmabciappStates = None

    def __init__(self, **kwargs: Any) -> None:
        """Initialize the base state.

        Args:
        ----
            **kwargs: Keyword arguments to pass to parent class.

        """
        super().__init__(**kwargs)
        self._event = None
        self._is_done = False

        self.data_dir = Path(__file__).parent / "data"
        if not self.data_dir.exists():
            self.data_dir.mkdir(parents=True)

        self.github_scraper = GitHubScraper(data_dir=str(self.data_dir))

    def act(self) -> None:
        """Perform the state's action."""
        self._is_done = True
        self._event = DemofsmabciappEvents.DONE

    def is_done(self) -> bool:
        """Check if the state has completed its action.

        Returns
        -------
            bool: True if the state is done, False otherwise.

        """
        return self._is_done

    @property
    def event(self) -> str | None:
        """Get the event triggered by this state.

        Returns
        -------
            Optional[str]: The event name if one was triggered, None otherwise.

        """
        return self._event.value if self._event else None


# Define states


class ErrorRound(BaseState):
    """This class implements the behaviour of the state ErrorRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = DemofsmabciappStates.ERRORROUND


class PrepareRound(BaseState):
    """This class implements the behaviour of the state PrepareRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = DemofsmabciappStates.PREPAREROUND

    def act(self) -> None:
        """Perform GitHub data collection."""
        try:
            usernames = ["8ball030"]

            self.context.logger.info(f"Fetching data for users: {', '.join(usernames)}")
            all_user_data = self.github_scraper.scrape_user_interactions(
                usernames=usernames,
                repos=["https://github.com/valory-xyz/open-autonomy"],
            )

            self.context.shared_state["user_issues"] = all_user_data

            self._is_done = True
            self._event = DemofsmabciappEvents.DONE

        except Exception as e:
            self.context.logger.exception(f"Error fetching GitHub data: {e!s}")
            self._event = DemofsmabciappEvents.ERROR


class PauseRound(BaseState):
    """This class implements the behaviour of the state PauseRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = DemofsmabciappStates.PAUSEROUND


class CheckRound(BaseState):
    """This class implements the behaviour of the state CheckRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = DemofsmabciappStates.CHECKROUND


class ExecuteRound(BaseState):
    """This class implements the behaviour of the state ExecuteRound."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = DemofsmabciappStates.EXECUTEROUND


class DemofsmabciappFsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state(DemofsmabciappStates.CHECKROUND.value, CheckRound(**kwargs), True)

        self.register_state(DemofsmabciappStates.ERRORROUND.value, ErrorRound(**kwargs))
        self.register_state(DemofsmabciappStates.PREPAREROUND.value, PrepareRound(**kwargs))
        self.register_state(DemofsmabciappStates.PAUSEROUND.value, PauseRound(**kwargs))
        self.register_state(DemofsmabciappStates.EXECUTEROUND.value, ExecuteRound(**kwargs))

        self.register_transition(
            source=DemofsmabciappStates.CHECKROUND.value,
            event=DemofsmabciappEvents.DONE,
            destination=DemofsmabciappStates.PREPAREROUND.value,
        )
        self.register_transition(
            source=DemofsmabciappStates.CHECKROUND.value,
            event=DemofsmabciappEvents.NO_NEW_MESSAGES,
            destination=DemofsmabciappStates.PAUSEROUND.value,
        )
        self.register_transition(
            source=DemofsmabciappStates.ERRORROUND.value,
            event=DemofsmabciappEvents.RETRY,
            destination=DemofsmabciappStates.CHECKROUND.value,
        )
        self.register_transition(
            source=DemofsmabciappStates.EXECUTEROUND.value,
            event=DemofsmabciappEvents.DONE,
            destination=DemofsmabciappStates.PAUSEROUND.value,
        )
        self.register_transition(
            source=DemofsmabciappStates.EXECUTEROUND.value,
            event=DemofsmabciappEvents.ERROR,
            destination=DemofsmabciappStates.ERRORROUND.value,
        )
        self.register_transition(
            source=DemofsmabciappStates.PAUSEROUND.value,
            event=DemofsmabciappEvents.DONE,
            destination=DemofsmabciappStates.CHECKROUND.value,
        )
        self.register_transition(
            source=DemofsmabciappStates.PAUSEROUND.value,
            event=DemofsmabciappEvents.TIMEOUT,
            destination=DemofsmabciappStates.ERRORROUND.value,
        )
        self.register_transition(
            source=DemofsmabciappStates.PREPAREROUND.value,
            event=DemofsmabciappEvents.DONE,
            destination=DemofsmabciappStates.EXECUTEROUND.value,
        )
        self.register_transition(
            source=DemofsmabciappStates.PREPAREROUND.value,
            event=DemofsmabciappEvents.TIMEOUT,
            destination=DemofsmabciappStates.ERRORROUND.value,
        )

    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up Demofsmabciapp FSM behaviour.")

    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down Demofsmabciapp FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        self.context.logger.info("Terminating the FSM behaviour.")
        super().terminate()
        sys.exit(0)
